name: "GitHub App Check Trigger"
description: "Trigger a check run in your custom GitHub App"
author: "Autonoma"
inputs:
  repository:
    description: "Repository name (owner/repo)"
    default: ${{ github.repository }}
  sha:
    description: "Commit SHA to create the check for"
    default: ${{ github.sha }}
  event-type:
    description: "Type of event (push, pull_request, etc.)"
    default: ${{ github.event_name }}
  pr-number:
    description: "Pull request number (if applicable)"
    default: ${{ github.event.pull_request.number || '' }}
  branch:
    description: "Branch name (without refs/heads/)"
    default: ${{ github.ref_name }}
  test-id:
    description: "The id of the test to run"
    default: "App Validation"
  check-name:
    description: "Name of the check to create"
    default: "App Validation"
outputs:
  status:
    description: "Status of the API call (success/failure)"
    value: ${{ steps.notify-service.outputs.status }}
  message:
    description: "Response message from the API"
    value: ${{ steps.notify-service.outputs.message }}

runs:
  using: "composite"
  steps:
    - name: Install Dependencies
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y jq

    - name: Extract Repository Information
      id: repo-info
      shell: bash
      run: |
        # Extract owner and repo name from repository
        REPO_FULL="${{ inputs.repository }}"
        OWNER=$(echo $REPO_FULL | cut -d'/' -f1)
        REPO=$(echo $REPO_FULL | cut -d'/' -f2)
        
        echo "Repository: $REPO_FULL"
        echo "Owner: $OWNER"
        echo "Repo: $REPO"
        
        echo "owner=$OWNER" >> $GITHUB_OUTPUT
        echo "repo=$REPO" >> $GITHUB_OUTPUT
        
    - name: Notify Service
      id: notify-service
      shell: bash
      if: steps.create-check.outputs.status == 'success'
      run: |
        echo "Notifying service about ${{ inputs.event-type }} event on ${{ inputs.repository }}"
        
        # Generate a unique request ID for verification
        request_id=$(cat /proc/sys/kernel/random/uuid)
        
        # Get repository metadata from GitHub API for additional verification
        repo_info=$(curl -s -H "Authorization: token ${{ github.token }}" \
          "https://api.github.com/repos/${{ inputs.repository }}")
        
        repo_id=$(echo $repo_info | jq -r '.id')
        repo_node_id=$(echo $repo_info | jq -r '.node_id')
        
        # Create JSON payload with all necessary information
        # Create GitHub token header for your service to use
        response=$(curl -s -X POST \
          -H "Content-Type: application/json" \
          -H "X-GitHub-Token: ${{ github.token }}" \
          -H "X-API-Key: ${{ inputs.api-key }}" \
          -H "X-Request-ID: $request_id" \
          -d '{
            "repository": "${{ inputs.repository }}",
            "owner": "${{ steps.repo-info.outputs.owner }}",
            "repo": "${{ steps.repo-info.outputs.repo }}",
            "repo_id": "'$repo_id'",
            "repo_node_id": "'$repo_node_id'",
            "sha": "${{ inputs.sha }}",
            "event_type": "${{ inputs.event-type }}",
            "pr_number": "${{ inputs.pr-number }}",
            "branch": "${{ inputs.branch }}",
            "test_id": "${{ inputs.test-id }}",
            "request_id": "'$request_id'",
            "github_run_id": "${{ github.run_id }}",
            "github_run_number": "${{ github.run_number }}",
            "github_run_attempt": "${{ github.run_attempt }}",
            "github_actor": "${{ github.actor }}"
          }' \
          "https://e80c-200-80-234-200.ngrok-free.app/api/github")
        
        # Set output based on HTTP status code
        if [ $? -eq 0 ]; then
          echo "Service notified successfully"
          echo "status=success" >> $GITHUB_OUTPUT
          echo "message=Service notified successfully" >> $GITHUB_OUTPUT
        else
          echo "Failed to notify service"
          echo "status=failure" >> $GITHUB_OUTPUT
          echo "message=Failed to notify service" >> $GITHUB_OUTPUT
        fi
